################################################
#  GITHUB ACTION WORKFLOW NAME
################################################
name: Release to Centralized AWS environment


################################################
#  GITHUB ACTION EVENT TRIGGER
################################################
on:
  workflow_dispatch:
  push:
    # branches: [ 'trunk' ]
    branches: [ 'develop' ]
    

################################################
#  GITHUB ACTION JOBS
################################################
jobs:
  centralized:
    name: centralized
    runs-on: ubuntu-latest


################################################
#  GITHUB ACTIONS GLOBAL ENV VARIABLES  
################################################
    env:
      REGION : ap-southeast-2
      ENV : live # Valid values are sandbox,stage,live only
      STACK_NAME: shared # Valid values are au,us,uk,p2,lf,nu,alpha,beta,shared only
      SUBDOMAIN: devops-centralized
      CFNS3BucketName: devops-cfn-templates1
      PRIVATES3BucketName: devops-private1
      RUNSECRETJOB: $SUBDOMAIN-$STACK_NAME  #false


################################################
#  GITHUB REPO CHECKOUT 
################################################
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis


################################################
#  PYTHON ENV  
################################################
      - name: Set up Python 3.8
        uses: actions/setup-python@v2
        with:
          python-version: 3.8


################################################
#  PYTHON MODULES CACHE  
################################################
      - name: Cache Python dependencies
        uses: actions/cache@v2
        id: cache-python
        with:
          path: ${{ env.pythonLocation}}/lib/python3.8/site-packages/*
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
            ${{ runner.os }}-


################################################
#  PYTHON MODULES INSTALL  
################################################
      - name: Install Python dependencies
        if: steps.cache-python.outputs.cache-hit != 'true'
        run: |
          echo "Installing dependencies and caching them."
          pip install -r requirements.txt


################################################
#  CLOUDFORMATION LINT ANALYSIS TEST 
################################################
      - name: Run cloudformation template Lint analysis test using cfn-lint
        uses: docker://ghcr.io/scottbrenner/cfn-lint-action:master
          

################################################
#  CLOUDFORMATION STATIC ANALYSIS TEST  
################################################
      - name: Run cloudformation template static analysis test using cfn-nag
        uses: stelligent/cfn_nag@master
        with:
          input_path: cfn-templates
          extra_args: --fail-on-warnings -o json --blacklist-path .cfn_nag_blacklist.yml


################################################
#  AWS CLI CONFIGURATION  
################################################ 
      - name: Configure AWS credentials from ${{ env.STACK_NAME }} account in ${{ env.REGION }} region
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.DEVOPS_AWS_KEY }}
          aws-secret-access-key: ${{ secrets.DEVOPS_SECRET_KEY }}
          aws-region: ${{ env.REGION }}
   

####################################################
#  CLOUDFORMATION ADDITIONAL TAG; KEY=VALUE FORMAT
#################################################### 
      - name: Create additional cloudformation tags for stack deployment
        run: |
          cat >> config/cfn.tags <<EOF 
          StackName=${{ env.STACK_NAME }}
          Env=${{ env.ENV }}
          RootStack=${{ env.SUBDOMAIN }}
          EOF


################################################
#  CLOUDFORMATION ADDITIONAL TAG FORMATTING
################################################ 
      - name: Convert JSON format cloudformation tags for stack deployment
        run: |
          python3 scripts/cfn-param-json-convert.py config/cfn.tags


################################################
#  AWS SECRET VARIABLE CREATION OR UPDATION
################################################ 
      - name: Create or Update AWS Secret Variables for ${{ env.STACK_NAME }} account in ${{ env.REGION }} region
        if: env.RUNSECRETJOB == 'true'
        run: |
          chmod +x scripts/cfn-secrets.sh && scripts/cfn-secrets.sh


#############################################################################
#  CLOUDFORMATION ADDITIONAL PARAMETERS (SECRETS INCLUDED); KEY=VALUE FORMAT
#############################################################################
      - name: Create additional cloudformation parameters for stack deployment
        run: |
          cat >> config/cfn.params <<EOF 
          StackName=${{ env.STACK_NAME }}
          Env=${{ env.ENV }}
          CFNS3BucketName=${{ env.CFNS3BucketName }}
          PRIVATES3BucketName=${{ env.PRIVATES3BucketName }}
          StagingAccountID=$(aws secretsmanager get-secret-value --secret-id ${{ env.STACK_NAME }}-AccountID-${{ env.ENV }}| jq --raw-output '.SecretString' | jq -r .StagingAccountID)
          EOF


##########################################################
#  CLOUDFORMATION ADDITIONAL PARAMETERS FORMATTING
########################################################## 
      - name: Convert JSON format cloudformation parameters for stack deployment
        run: |
          python3 scripts/cfn-param-json-convert.py config/cfn.params


##########################################################
#  CLOUDFORMATION DEPLOYMENT
########################################################## 
      - name: Create or Update cloudformation templates from ${{ env.STACK_NAME }} AWS account in ${{ env.REGION }} region
        run: |
          python3 scripts/cfn-deploy.py ${{ env.STACK_NAME }}-${{ env.SUBDOMAIN }}-${{ env.ENV }} cfn-templates/s3-cfn.yml config/cfn-params.json config/cfn-tags.json


##########################################################
#  AWS S3 SYNC - CLOUDFORMATION TEMPLATES 
##########################################################
      - name: AWS S3 Sync operation
        run: |
          aws s3 sync cfn-templates/ s3://${{env.CFNS3BucketName}}/${{env.STACK_NAME}}/${{env.REGION}}/cfn-templates --delete


##########################################################
#  SLACK NOTIFICATION
##########################################################       
      - name: Slack Notification
        if: always() # Pick up events even if the job fails or is canceled.
        uses: 8398a7/action-slack@v3
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          MATRIX_CONTEXT: ${{ toJson(matrix) }} # required
        with:
          status: ${{ job.status }}
          author_name: ${{ env.SUBDOMAIN }} deployed to ${{ env.ENV }} environemnt in ${{ env.STACK_NAME }} AWS account
          mention: 'here'
          if_mention: failure,cancelled
          job_name: centralized # Match the name above.
          fields: repo,commit,eventName,ref,workflow,message,author,job,took
          custom_payload: |
            {
            username: 'GitHub Action CI WorkFlow',
            icon_emoji: ':github:',
            attachments: [{
              color: '${{ job.status }}' === 'success' ? 'good' : ${{ job.status }}' === 'failure' ? 'danger' : 'warning',
              text:
             `${process.env.AS_REPO}\n
              ${process.env.AS_COMMIT}\n
              ${process.env.AS_EVENT_NAME}\n
              @${process.env.AS_REF}\n
              @${process.env.AS_WORKFLOW}\n
              ${process.env.AS_MESSAGE}\n
              ${process.env.AS_AUTHOR}\n
              ${process.env.AS_JOB}\n
              ${process.env.AS_TOOK}`,
            }]
            }