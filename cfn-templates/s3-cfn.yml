AWSTemplateFormatVersion: '2010-09-09'

Description: "This cloudformation template create resources for centralized resources sharing"

Metadata:
  Authors:
    Description: Sunil and Mihai (sunil@practera.com/mihai@practera.com) based on
      AWS quickstart/widdix and best practise.
  License:
    Description: Copyright 2020 Intersective PTY LTD and its affiliates. All Rights
      Reserved.

Parameters:

  CFNS3BucketName:
    Description: S3 bucket name for the Cloudformation template stored. This string
      can include numbers, lowercase letters, uppercase letters, and hyphens (-).
      It cannot start or end with a hyphen (-).
    Default: devops-cfn-templates
    Type: String
  CFNS3BucketNameKeyPair:
    Description: S3 bucket name for the Cloudformation template stored. This string
      can include numbers, lowercase letters, uppercase letters, and hyphens (-).
      It cannot start or end with a hyphen (-).
    Default: devops-cfn-templates
    Type: String
  CFNS3BucketRegion:
    Default: ap-southeast-2
    Description: The AWS Region where the Cloudformation template stored in S3 bucket
      is hosted. When using your own bucket, you must specify this value.
    Type: String
  StackName:
    ConstraintDescription: This will be unique string to represent our stack.
    Default: beta
    Description: A client/project/product unique name for the stack to idnetify later.
      This string can include numbers, lowercase letters, uppercase letters, and hyphens
      (-). It cannot start or end with a hyphen (-).
    Type: String
    AllowedValues: [au,us,uk,p2,lf,nu,alpha,beta,centralized]
  Env:
    Description: Environment type.
    Default: stage
    Type: String
    AllowedValues:
      - sandbox
      - stage
      - live
    ConstraintDescription: must specify sandbox,stage,live.
  S3Versioning:
    Description: 'Enable versioning to keep a backup if objects change.'
    Type: String
    Default: false
    AllowedValues: [true, false, 'false-but-was-true']
  S3NoncurrentVersionExpirationInDays:
    Description: 'Remove noncurrent object versions after days (set to 0 to disable).'
    Type: Number
    Default: 0
    MinValue: 0
  S3ExpirationInDays:
    Description: 'Remove objects after days (set to 0 to disable).'
    Type: Number
    Default: 0
    MinValue: 0
  S3ExpirationPrefix:
    Description: 'Optional key StackName for expiring objects.'
    Type: String
    Default: ''
  StagingAccountID:
    Description: 'Staging Account ID'
    Type: String
    Default: ''
    NoEcho: true
  StagingUser:
    Description: 'Staging Github Action User ID'
    Type: String
    Default: ''
    NoEcho: true
  
Conditions:
  HasCFNS3BucketName: !Not [!Equals [!Ref CFNS3BucketName, '']]
  HasCFNS3BucketNameKeyPair: !Not [!Equals [!Ref CFNS3BucketNameKeyPair, '']]
  HasVersioning: !Equals [!Ref S3Versioning, true]
  HadVersioning: !Equals [!Ref S3Versioning, 'false-but-was-true']
  HasNoncurrentVersionExpirationInDays: !Not [!Equals [!Ref S3NoncurrentVersionExpirationInDays, 0]]
  HasExpirationInDays: !Not [!Equals [!Ref S3ExpirationInDays, 0]]
  HasExpirationPrefix: !Not [!Equals [!Ref S3ExpirationPrefix, '']]

Resources:
  S3BucketName1: 
    Type: 'AWS::S3::Bucket'
    Properties:
      AccessControl: Private
      BucketName: !If [HasCFNS3BucketName, !Ref CFNS3BucketName, !Ref 'AWS::NoValue']
      LifecycleConfiguration:
        Rules:
        - AbortIncompleteMultipartUpload:
            DaysAfterInitiation: 7
          Status: Enabled
          Id: AbortIncompleteMultipartUpload
        - NoncurrentVersionExpirationInDays: !If [HasNoncurrentVersionExpirationInDays, !Ref S3NoncurrentVersionExpirationInDays, 1]
          Status: !If [HasNoncurrentVersionExpirationInDays, Enabled, Disabled]
          Id: NoncurrentVersionExpirationInDays
        - ExpirationInDays: !If [HasExpirationInDays, !Ref S3ExpirationInDays, 1]
          Prefix: !If [HasExpirationPrefix, !Ref S3ExpirationPrefix, !Ref 'AWS::NoValue']
          Status: !If [HasExpirationInDays, Enabled, Disabled]
          Id: ExpirationInDays
      VersioningConfiguration: !If [HasVersioning, {Status: Enabled}, !If [HadVersioning, {Status: Suspended}, !Ref 'AWS::NoValue']]
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256

  
  S3BucketName2: 
    Type: 'AWS::S3::Bucket'
    Properties:
      AccessControl: Private
      BucketName: !If [HasCFNS3BucketNameKeyPair, !Ref CFNS3BucketNameKeyPair, !Ref 'AWS::NoValue']
      LifecycleConfiguration:
        Rules:
        - AbortIncompleteMultipartUpload:
            DaysAfterInitiation: 7
          Status: Enabled
          Id: AbortIncompleteMultipartUpload
        - NoncurrentVersionExpirationInDays: !If [HasNoncurrentVersionExpirationInDays, !Ref S3NoncurrentVersionExpirationInDays, 1]
          Status: !If [HasNoncurrentVersionExpirationInDays, Enabled, Disabled]
          Id: NoncurrentVersionExpirationInDays
        - ExpirationInDays: !If [HasExpirationInDays, !Ref S3ExpirationInDays, 1]
          Prefix: !If [HasExpirationPrefix, !Ref S3ExpirationPrefix, !Ref 'AWS::NoValue']
          Status: !If [HasExpirationInDays, Enabled, Disabled]
          Id: ExpirationInDays
      VersioningConfiguration: !If [HasVersioning, {Status: Enabled}, !If [HadVersioning, {Status: Suspended}, !Ref 'AWS::NoValue']]
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      
  # CFNS3BucketNamePolicy:
  #   Type: 'AWS::S3::BucketPolicy'
  #   Properties:
  #     Bucket: !Ref S3BucketName1
  #     PolicyDocument:
  #       Statement:
  #         - Action:
  #           - 's3:ListBucket'
  #           Effect: Allow
  #           Resource: !Sub '${S3BucketName1.Arn}'
  #           Principal:
  #             AWS: !Sub 'arn:aws:iam::${StagingAccountID}:user/${StagingUser}'
  #         - Action:
  #           - 's3:*Object'
  #           - 's3:*ObjectAcl'
  #           Effect: Allow
  #           Resource: !Sub '${S3BucketName1.Arn}/*'
  #           Principal:
  #             AWS: !Sub 'arn:aws:iam::${StagingAccountID}:user/${StagingUser}'

  # CFNS3BucketNameKeyPairPolicy:
  #   Type: 'AWS::S3::BucketPolicy'
  #   Properties:
  #     Bucket: !Ref S3BucketName2
  #     PolicyDocument:
  #       Statement:
  #         - Action:
  #           - 's3:ListBucket'
  #           Effect: Allow
  #           Resource: !Sub '${S3BucketName2.Arn}'
  #           Principal:
  #             AWS: !Sub 'arn:aws:iam::${StagingAccountID}:user/${StagingUser}'
  #         - Action:
  #           - 's3:*Object'
  #           - 's3:*ObjectAcl'
  #           Effect: Allow
  #           Resource: !Sub '${S3BucketName2.Arn}/*'
  #           Principal:
  #             AWS: !Sub 'arn:aws:iam::${StagingAccountID}:user/${StagingUser}'

Outputs:
  S3StackName:
    Description: 'Stack name'
    Value: !Sub '${AWS::StackName}'
  S3BucketName1:
    Description: 'Name of the S3BucketName1'
    Value: !Ref S3BucketName1
    Export:
      Name: !Sub '${StackName}-CFNS3BucketName-${Env}'
  S3BucketName2:
    Description: 'Name of the S3BucketName2'
    Value: !Ref S3BucketName1
    Export:
      Name: !Sub '${StackName}-CFNS3BucketNameKeyPair-${Env}'
  